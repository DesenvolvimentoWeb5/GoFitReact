import { GoogleGenAI } from "@google/genai";

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
}

const SYSTEM_PROMPT = `Voc√™ √© o assistente virtual do GoFit, uma plataforma dedicada a sa√∫de, qualidade de vida e bem-estar atrav√©s do exerc√≠cio f√≠sico.

INSTRU√á√ïES IMPORTANTES:
1. Voc√™ DEVE responder APENAS sobre t√≥picos relacionados a:
   - Exerc√≠cios f√≠sicos e treinos
   - Nutri√ß√£o e alimenta√ß√£o saud√°vel
   - Sa√∫de e bem-estar
   - Benef√≠cios do exerc√≠cio (f√≠sico e mental)
   - Qualidade de vida
   - Preven√ß√£o de doen√ßas atrav√©s de h√°bitos saud√°veis
   - Sa√∫de mental e exerc√≠cio
   - Dicas de motiva√ß√£o para vida saud√°vel

2. Se o usu√°rio perguntar sobre QUALQUER outro assunto que n√£o esteja relacionado aos t√≥picos acima, voc√™ deve educadamente redirecionar a conversa, dizendo algo como:
   "Desculpe, sou especializado apenas em assuntos relacionados a sa√∫de, fitness, exerc√≠cios e bem-estar. Posso ajudar voc√™ com informa√ß√µes sobre treinos, nutri√ß√£o, benef√≠cios do exerc√≠cio ou qualidade de vida. Como posso ajudar?"

3. Sempre seja:
   - Amig√°vel e motivador
   - Claro e objetivo nas respostas
   - Baseado em informa√ß√µes confi√°veis
   - Encorajador de h√°bitos saud√°veis

4. NUNCA forne√ßa diagn√≥sticos m√©dicos. Sempre sugira consultar profissionais de sa√∫de para quest√µes espec√≠ficas de sa√∫de.

5. Responda em portugu√™s do Brasil, de forma natural e conversacional.`;

export async function sendMessageToAI(
  userMessage: string,
  conversationHistory: Message[]
): Promise<string> {
  const apiKey = import.meta.env.VITE_GEMINI_API_KEY;

  // console.log("üîë API Key presente?", apiKey ? "Sim" : "N√£o");

  if (!apiKey || apiKey === "YOUR_API_KEY_HERE") {
    throw new Error(
      "CONFIG_ERROR: Crie um arquivo .env na raiz do projeto com VITE_GEMINI_API_KEY=sua_chave_aqui"
    );
  }

  try {
    // console.log("üì§ Enviando mensagem para a API Gemini...");

    // Inicializar cliente do Google Gemini
    const ai = new GoogleGenAI({ apiKey });

    // Construir hist√≥rico de conversa
    const history = conversationHistory
      .slice(-6) // √öltimas 6 mensagens para contexto
      .map((msg) => ({
        role: msg.isUser ? "user" : "model",
        parts: [{ text: msg.text }],
      }));

    // Preparar o conte√∫do completo com system prompt e hist√≥rico
    const contents = [
      {
        role: "user" as const,
        parts: [{ text: SYSTEM_PROMPT }],
      },
      {
        role: "model" as const,
        parts: [
          {
            text: "Entendido! Sou o assistente virtual do GoFit e vou ajudar apenas com quest√µes relacionadas a sa√∫de, exerc√≠cios, nutri√ß√£o, bem-estar e qualidade de vida. Estou pronto para ajudar!",
          },
        ],
      },
      ...history,
      {
        role: "user" as const,
        parts: [{ text: userMessage }],
      },
    ];

    // Enviar mensagem usando o SDK oficial
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: contents,
    });

    // console.log("‚úÖ Resposta recebida com sucesso");

    // Extrair texto da resposta
    const text = response.text;

    if (!text) {
      throw new Error("RESPONSE_ERROR: A API retornou uma resposta vazia");
    }

    return text;
  } catch (error: any) {
    // console.error("‚ùå Erro ao enviar mensagem:", error);

    // Tratamento de erros espec√≠ficos
    if (
      error.message?.includes("API_KEY_INVALID") ||
      error.message?.includes("API key not valid")
    ) {
      throw new Error(
        "API_ERROR: API key inv√°lida. Verifique:\n" +
          "1. Acesse: https://aistudio.google.com/app/apikey\n" +
          "2. Crie uma nova API key\n" +
          "3. Copie e cole no arquivo .env\n" +
          "4. Reinicie o servidor (npm run dev)"
      );
    }

    if (error.message?.includes("quota") || error.message?.includes("429")) {
      throw new Error(
        "RATE_LIMIT: Limite de requisi√ß√µes atingido. Aguarde alguns minutos."
      );
    }

    if (
      error.message?.includes("403") ||
      error.message?.includes("permission")
    ) {
      throw new Error(
        "API_ERROR: API key sem permiss√£o ou regi√£o n√£o suportada."
      );
    }

    throw error;
  }
}
